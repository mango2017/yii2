<?php
namespace backend\controllers;

use Yii;
use yii\base\Component;
use yii\filters\AccessControl;
use yii\web\Controller;
use common\models\LoginForm;
use yii\filters\VerbFilter;

use sizeg\jwt\JwtHttpBearerAuth;

//use Lcobucci\JWT\Signer\Keychain; // just to make our life simpler
use Lcobucci\JWT\Signer\KeychainTest;
//use Lcobucci\JWT\Signer\Keychain;
use Lcobucci\JWT\Signer\Keychain;

use Lcobucci\JWT\Signer\Rsa\Sha256; // you can use Lcobucci\JWT\Signer\Ecdsa\Sha256 if you're using ECDSA keys





/**
 * Site controller
 * http://localhost/advanced/backend/web/index.php?r=jwt%2Ftest
 */
class JwtController extends Controller
{
    /**
     * @inheritdoc
     */
//    public function behaviors()
//    {
//        return [
//            'access' => [
//                'class' => AccessControl::className(),
//                'rules' => [
//                    [
//                        'actions' => ['login', 'error'],
//                        'allow' => true,
//                    ],
//                    [
//                        'actions' => ['logout', 'index'],
//                        'allow' => true,
//                        'roles' => ['@'],
//                    ],
//                ],
//            ],
//            'verbs' => [
//                'class' => VerbFilter::className(),
//                'actions' => [
//                    'logout' => ['post'],
//                ],
//            ],
//        ];
//    }


//    public function behaviors()
//    {
//        $behaviors = parent::behaviors();
//        $behaviors['authenticator'] = [
//            'class' => JwtHttpBearerAuth::className()
//        ];
//
//        return $behaviors;
//    }

//    public function behaviors()
//    {
//        //return parent::behaviors(); // TODO: Change the autogenerated stub
//        $behaviors = parent::behaviors();
//        $behaviors['authenticator'] = [
//            'class' => JwtHttpBearerAuth::className()
//        ];
//
//        return $behaviors;
//    }


    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionLogin()
    {
        if (!\Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        } else {
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    //创建jwt
    public function actionTest()
    {
        $token = Yii::$app->jwt->getBuilder()
            ->setIssuer('http://example.com')// Configures the issuer (iss claim)
            ->setAudience('http://example.org')// Configures the audience (aud claim)
            ->setId('4f1g23a12aa', true)// Configures the id (jti claim), replicating as a header item
            ->setIssuedAt(time())// Configures the time that the token was issue (iat claim)
            ->setNotBefore(time() + 60)// Configures the time before which the token cannot be accepted (nbf claim)
            ->setExpiration(time() + 3600)// Configures the expiration time of the token (exp claim)
            ->set('uid', 1)// Configures a new claim, called "uid"
            ->getToken(); // Retrieves the generated token

        echo $token;
        exit;
        $token->getHeaders(); // Retrieves the token headers
        $token->getClaims(); // Retrieves the token claims

        echo $token->getHeader('jti') . "<br/>"; // will print "4f1g23a12aa"
        echo $token->getClaim('iss') . "<br/>"; // will print "http://example.com"
        echo $token->getClaim('uid') . "<br/>"; // will print "1"
        echo $token; // The string representation of the object is a JWT string (pretty easy, right?)
    }

    //解析jwt
    public function actionDemo()
    {
//        $token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIiwianRpIjoiNGYxZzIzYTEyYWEifQ.eyJpc3MiOiJodHRwOlwvXC9leGFtcGxlLmNvbSIsImF1ZCI6Imh0dHA6XC9cL2V4YW1wbGUub3JnIiwianRpIjoiNGYxZzIzYTEyYWEiLCJpYXQiOjE1NDI4NjgwOTIsIm5iZiI6MTU0Mjg2ODE1MiwiZXhwIjoxNTQyODcxNjkyLCJ1aWQiOjF9.";
//        $token = Yii::$app->jwt->getParser()->parse((string) $token); // Parses from a string
//        $token->getHeaders(); // Retrieves the token header
//        $token->getClaims(); // Retrieves the token claims
//
//        echo $token->getHeader('jti'); // will print "4f1g23a12aa"
//        echo $token->getClaim('iss'); // will print "http://example.com"
//        echo $token->getClaim('uid'); // will print "1"

        $signer = new Sha256();

        $keychain = new Keychain();

        $token = Yii::$app->jwt->getBuilder()
            ->setIssuer('http://example.com') // Configures the issuer (iss claim)
            ->setAudience('http://example.org') // Configures the audience (aud claim)
            ->setId('4f1g23a12aa', true) // Configures the id (jti claim), replicating as a header item
            ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
            ->setNotBefore(time() + 60) // Configures the time before which the token cannot be accepted (nbf claim)
            ->setExpiration(time() + 3600) // Configures the expiration time of the token (exp claim)
            ->set('uid', 888) // Configures a new claim, called "uid"
            ->sign($signer,  $keychain->getPrivateKey('file://E:\worksoft\openssl\OpenSSL-Win64\bin\rsa_private_key.pem')) // creates a signature using your private key
            ->getToken(); // Retrieves the generated token

//        echo $token;exit;
//        echo $token->getClaim('uid');exit;


//        var_dump($token->verify($signer, $keychain->getPublicKey('file://{path to your public key}')));

        var_dump($token->verify($signer, $keychain->getPublicKey('file://E:\worksoft\openssl\OpenSSL-Win64\bin\rsa_public_key.pem'))); // true when the public key was generated by the private one =)
    }
}
